Архитектура действий и кулдаунов в проекте Battler
Основные принципы проектирования

Stateless-действия - Действия создаются заново для каждого использования и уничтожаются после выполнения. 
Не хранят состояние, историю или кулдауны.

Полное разделение ответственности - Каждый компонент системы отвечает только за свою зону: 
персонаж как источник, системы за управление, действия за исполнение.

Event-Driven архитектура - Все взаимодействие через событийную шину. Действия публикуют события, 
системы на них реагируют.

Структура хранения информации
Статическая конфигурация - Базовые и unlockable действия персонажа хранятся в конфигурационных файлах (JSON). 
Определяет, что персонаж может делать в принципе.

Динамическое состояние боя - Текущий набор действий для боя хранится в BattleSession. 
Экипированные действия в ActionLoadoutSystem.

Система кулдаунов - Отдельная система хранит состояние восстановления способностей для всех персонажей.
Ключевые компоненты системы

Реестр действий - Центральный каталог всех доступных в игре действий. 
Соотносит строковые идентификаторы с классами действий.

Система кулдаунов - Глобальный менеджер времени восстановления. 
Хранит таймеры для всех способностей всех персонажей.

Система действий - Фабрика создания экземпляров действий. 
Предоставляет доступные действия с учетом кулдаунов и конфигурации.

Battle Session - Контейнер данных конкретного боя. 
Хранит текущий набор действий для каждого участника.

Процесс работы в бою
Подготовка к бою - Формируется финальный список действий из базовых, 
экипированных и полученных от навыков. Сохраняется в BattleSession.

Получение доступных действий - Система действий проверяет кулдауны и 
создает экземпляры доступных прямо сейчас действий.

Выполнение действия - Созданное действие выполняется, 
публикует события через шину, устанавливает кулдаун через систему.

Обновление состояния - В конце хода системы уменьшают кулдауны и обновляют состояние.
Преимущества архитектуры

Декомпозиция - Каждая система отвечает только за свою зону ответственности.

Тестируемость - Легко тестировать изолированные компоненты.

Расширяемость - Просто добавлять новые действия и системы.

Производительность - Stateless-объекты экономят память.

Гибкость - Динамическое изменение действий во время боя.
